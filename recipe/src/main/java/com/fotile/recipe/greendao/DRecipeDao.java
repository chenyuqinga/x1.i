package com.fotile.recipe.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fotile.recipe.bean.recipe.DProperties;
import com.fotile.recipe.bean.recipe.StringConverter;
import java.util.List;

import com.fotile.recipe.bean.recipe.DRecipe;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DRECIPE".
*/
public class DRecipeDao extends AbstractDao<DRecipe, Long> {

    public static final String TABLENAME = "DRECIPE";

    /**
     * Properties of entity DRecipe.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property LongName = new Property(3, String.class, "longName", false, "LONG_NAME");
        public final static Property LocalId = new Property(4, String.class, "localId", false, "LOCAL_ID");
        public final static Property Instructions = new Property(5, String.class, "instructions", false, "INSTRUCTIONS");
        public final static Property InstructionsText = new Property(6, String.class, "instructionsText", false, "INSTRUCTIONS_TEXT");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
        public final static Property Source = new Property(8, String.class, "source", false, "SOURCE");
        public final static Property UserId = new Property(9, String.class, "userId", false, "USER_ID");
        public final static Property AddRemarks = new Property(10, String.class, "addRemarks", false, "ADD_REMARKS");
        public final static Property Tips = new Property(11, String.class, "tips", false, "TIPS");
        public final static Property PageViews = new Property(12, String.class, "pageViews", false, "PAGE_VIEWS");
        public final static Property CollectCount = new Property(13, String.class, "collectCount", false, "COLLECT_COUNT");
        public final static Property SourceId = new Property(14, String.class, "sourceId", false, "SOURCE_ID");
        public final static Property Status = new Property(15, String.class, "status", false, "STATUS");
        public final static Property VideoUrl = new Property(16, String.class, "videoUrl", false, "VIDEO_URL");
        public final static Property Creator = new Property(17, String.class, "creator", false, "CREATOR");
        public final static Property OtCreateTime = new Property(18, String.class, "otCreateTime", false, "OT_CREATE_TIME");
        public final static Property CreateId = new Property(19, String.class, "createId", false, "CREATE_ID");
        public final static Property CreateTime = new Property(20, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Version = new Property(21, String.class, "version", false, "VERSION");
        public final static Property ModifyBy = new Property(22, String.class, "modifyBy", false, "MODIFY_BY");
        public final static Property SerialNumber = new Property(23, int.class, "serialNumber", false, "SERIAL_NUMBER");
        public final static Property ModifyTime = new Property(24, String.class, "modifyTime", false, "MODIFY_TIME");
        public final static Property InnerImages = new Property(25, String.class, "innerImages", false, "INNER_IMAGES");
        public final static Property MinImages = new Property(26, String.class, "minImages", false, "MIN_IMAGES");
        public final static Property Images = new Property(27, String.class, "images", false, "IMAGES");
        public final static Property CategoryId = new Property(28, String.class, "categoryId", false, "CATEGORY_ID");
        public final static Property IsAdults = new Property(29, boolean.class, "isAdults", false, "IS_ADULTS");
        public final static Property IsHome = new Property(30, boolean.class, "isHome", false, "IS_HOME");
    }

    private DaoSession daoSession;

    private final StringConverter innerImagesConverter = new StringConverter();
    private final StringConverter minImagesConverter = new StringConverter();
    private final StringConverter imagesConverter = new StringConverter();

    public DRecipeDao(DaoConfig config) {
        super(config);
    }
    
    public DRecipeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DRECIPE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"ID\" TEXT," + // 1: id
                "\"NAME\" TEXT," + // 2: name
                "\"LONG_NAME\" TEXT," + // 3: longName
                "\"LOCAL_ID\" TEXT," + // 4: localId
                "\"INSTRUCTIONS\" TEXT," + // 5: instructions
                "\"INSTRUCTIONS_TEXT\" TEXT," + // 6: instructionsText
                "\"TYPE\" TEXT," + // 7: type
                "\"SOURCE\" TEXT," + // 8: source
                "\"USER_ID\" TEXT," + // 9: userId
                "\"ADD_REMARKS\" TEXT," + // 10: addRemarks
                "\"TIPS\" TEXT," + // 11: tips
                "\"PAGE_VIEWS\" TEXT," + // 12: pageViews
                "\"COLLECT_COUNT\" TEXT," + // 13: collectCount
                "\"SOURCE_ID\" TEXT," + // 14: sourceId
                "\"STATUS\" TEXT," + // 15: status
                "\"VIDEO_URL\" TEXT," + // 16: videoUrl
                "\"CREATOR\" TEXT," + // 17: creator
                "\"OT_CREATE_TIME\" TEXT," + // 18: otCreateTime
                "\"CREATE_ID\" TEXT," + // 19: createId
                "\"CREATE_TIME\" TEXT," + // 20: createTime
                "\"VERSION\" TEXT," + // 21: version
                "\"MODIFY_BY\" TEXT," + // 22: modifyBy
                "\"SERIAL_NUMBER\" INTEGER NOT NULL ," + // 23: serialNumber
                "\"MODIFY_TIME\" TEXT," + // 24: modifyTime
                "\"INNER_IMAGES\" TEXT," + // 25: innerImages
                "\"MIN_IMAGES\" TEXT," + // 26: minImages
                "\"IMAGES\" TEXT," + // 27: images
                "\"CATEGORY_ID\" TEXT," + // 28: categoryId
                "\"IS_ADULTS\" INTEGER NOT NULL ," + // 29: isAdults
                "\"IS_HOME\" INTEGER NOT NULL );"); // 30: isHome
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DRECIPE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DRecipe entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String longName = entity.getLongName();
        if (longName != null) {
            stmt.bindString(4, longName);
        }
 
        String localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindString(5, localId);
        }
 
        String instructions = entity.getInstructions();
        if (instructions != null) {
            stmt.bindString(6, instructions);
        }
 
        String instructionsText = entity.getInstructionsText();
        if (instructionsText != null) {
            stmt.bindString(7, instructionsText);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(9, source);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(10, userId);
        }
 
        String addRemarks = entity.getAddRemarks();
        if (addRemarks != null) {
            stmt.bindString(11, addRemarks);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(12, tips);
        }
 
        String pageViews = entity.getPageViews();
        if (pageViews != null) {
            stmt.bindString(13, pageViews);
        }
 
        String collectCount = entity.getCollectCount();
        if (collectCount != null) {
            stmt.bindString(14, collectCount);
        }
 
        String sourceId = entity.getSourceId();
        if (sourceId != null) {
            stmt.bindString(15, sourceId);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(16, status);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(17, videoUrl);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(18, creator);
        }
 
        String otCreateTime = entity.getOtCreateTime();
        if (otCreateTime != null) {
            stmt.bindString(19, otCreateTime);
        }
 
        String createId = entity.getCreateId();
        if (createId != null) {
            stmt.bindString(20, createId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(21, createTime);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(22, version);
        }
 
        String modifyBy = entity.getModifyBy();
        if (modifyBy != null) {
            stmt.bindString(23, modifyBy);
        }
        stmt.bindLong(24, entity.getSerialNumber());
 
        String modifyTime = entity.getModifyTime();
        if (modifyTime != null) {
            stmt.bindString(25, modifyTime);
        }
 
        List innerImages = entity.getInnerImages();
        if (innerImages != null) {
            stmt.bindString(26, innerImagesConverter.convertToDatabaseValue(innerImages));
        }
 
        List minImages = entity.getMinImages();
        if (minImages != null) {
            stmt.bindString(27, minImagesConverter.convertToDatabaseValue(minImages));
        }
 
        List images = entity.getImages();
        if (images != null) {
            stmt.bindString(28, imagesConverter.convertToDatabaseValue(images));
        }
 
        String categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindString(29, categoryId);
        }
        stmt.bindLong(30, entity.getIsAdults() ? 1L: 0L);
        stmt.bindLong(31, entity.getIsHome() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DRecipe entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String longName = entity.getLongName();
        if (longName != null) {
            stmt.bindString(4, longName);
        }
 
        String localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindString(5, localId);
        }
 
        String instructions = entity.getInstructions();
        if (instructions != null) {
            stmt.bindString(6, instructions);
        }
 
        String instructionsText = entity.getInstructionsText();
        if (instructionsText != null) {
            stmt.bindString(7, instructionsText);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(9, source);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(10, userId);
        }
 
        String addRemarks = entity.getAddRemarks();
        if (addRemarks != null) {
            stmt.bindString(11, addRemarks);
        }
 
        String tips = entity.getTips();
        if (tips != null) {
            stmt.bindString(12, tips);
        }
 
        String pageViews = entity.getPageViews();
        if (pageViews != null) {
            stmt.bindString(13, pageViews);
        }
 
        String collectCount = entity.getCollectCount();
        if (collectCount != null) {
            stmt.bindString(14, collectCount);
        }
 
        String sourceId = entity.getSourceId();
        if (sourceId != null) {
            stmt.bindString(15, sourceId);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(16, status);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(17, videoUrl);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(18, creator);
        }
 
        String otCreateTime = entity.getOtCreateTime();
        if (otCreateTime != null) {
            stmt.bindString(19, otCreateTime);
        }
 
        String createId = entity.getCreateId();
        if (createId != null) {
            stmt.bindString(20, createId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(21, createTime);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(22, version);
        }
 
        String modifyBy = entity.getModifyBy();
        if (modifyBy != null) {
            stmt.bindString(23, modifyBy);
        }
        stmt.bindLong(24, entity.getSerialNumber());
 
        String modifyTime = entity.getModifyTime();
        if (modifyTime != null) {
            stmt.bindString(25, modifyTime);
        }
 
        List innerImages = entity.getInnerImages();
        if (innerImages != null) {
            stmt.bindString(26, innerImagesConverter.convertToDatabaseValue(innerImages));
        }
 
        List minImages = entity.getMinImages();
        if (minImages != null) {
            stmt.bindString(27, minImagesConverter.convertToDatabaseValue(minImages));
        }
 
        List images = entity.getImages();
        if (images != null) {
            stmt.bindString(28, imagesConverter.convertToDatabaseValue(images));
        }
 
        String categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindString(29, categoryId);
        }
        stmt.bindLong(30, entity.getIsAdults() ? 1L: 0L);
        stmt.bindLong(31, entity.getIsHome() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(DRecipe entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DRecipe readEntity(Cursor cursor, int offset) {
        DRecipe entity = new DRecipe( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // longName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // localId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // instructions
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // instructionsText
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // source
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // addRemarks
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // tips
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // pageViews
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // collectCount
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sourceId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // status
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // videoUrl
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // creator
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // otCreateTime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // createId
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // createTime
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // version
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // modifyBy
            cursor.getInt(offset + 23), // serialNumber
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // modifyTime
            cursor.isNull(offset + 25) ? null : innerImagesConverter.convertToEntityProperty(cursor.getString(offset + 25)), // innerImages
            cursor.isNull(offset + 26) ? null : minImagesConverter.convertToEntityProperty(cursor.getString(offset + 26)), // minImages
            cursor.isNull(offset + 27) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 27)), // images
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // categoryId
            cursor.getShort(offset + 29) != 0, // isAdults
            cursor.getShort(offset + 30) != 0 // isHome
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DRecipe entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLongName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLocalId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInstructions(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInstructionsText(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSource(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAddRemarks(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTips(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPageViews(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCollectCount(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSourceId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setStatus(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setVideoUrl(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCreator(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOtCreateTime(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCreateId(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCreateTime(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setVersion(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setModifyBy(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setSerialNumber(cursor.getInt(offset + 23));
        entity.setModifyTime(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setInnerImages(cursor.isNull(offset + 25) ? null : innerImagesConverter.convertToEntityProperty(cursor.getString(offset + 25)));
        entity.setMinImages(cursor.isNull(offset + 26) ? null : minImagesConverter.convertToEntityProperty(cursor.getString(offset + 26)));
        entity.setImages(cursor.isNull(offset + 27) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 27)));
        entity.setCategoryId(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setIsAdults(cursor.getShort(offset + 29) != 0);
        entity.setIsHome(cursor.getShort(offset + 30) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DRecipe entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DRecipe entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DRecipe entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDPropertiesDao().getAllColumns());
            builder.append(" FROM DRECIPE T");
            builder.append(" LEFT JOIN DPROPERTIES T0 ON T.\"_id\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DRecipe loadCurrentDeep(Cursor cursor, boolean lock) {
        DRecipe entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DProperties properties = loadCurrentOther(daoSession.getDPropertiesDao(), cursor, offset);
        entity.setProperties(properties);

        return entity;    
    }

    public DRecipe loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DRecipe> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DRecipe> list = new ArrayList<DRecipe>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DRecipe> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DRecipe> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
