package com.fotile.recipe.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.fotile.recipe.bean.recipe.StringConverter;
import java.util.List;

import com.fotile.recipe.bean.recipe.DCookingStep;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DCOOKING_STEP".
*/
public class DCookingStepDao extends AbstractDao<DCookingStep, Long> {

    public static final String TABLENAME = "DCOOKING_STEP";

    /**
     * Properties of entity DCookingStep.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Index = new Property(2, Integer.class, "index", false, "INDEX");
        public final static Property Images = new Property(3, String.class, "images", false, "IMAGES");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property ReminderText = new Property(5, String.class, "reminderText", false, "REMINDER_TEXT");
        public final static Property Reminder = new Property(6, String.class, "reminder", false, "REMINDER");
        public final static Property DescriptionText = new Property(7, String.class, "descriptionText", false, "DESCRIPTION_TEXT");
        public final static Property Description = new Property(8, String.class, "description", false, "DESCRIPTION");
    }

    private final StringConverter imagesConverter = new StringConverter();
    private Query<DCookingStep> dRecipe_CookingStepsQuery;

    public DCookingStepDao(DaoConfig config) {
        super(config);
    }
    
    public DCookingStepDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DCOOKING_STEP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"ID\" TEXT," + // 1: id
                "\"INDEX\" INTEGER," + // 2: index
                "\"IMAGES\" TEXT," + // 3: images
                "\"TIME\" TEXT," + // 4: time
                "\"REMINDER_TEXT\" TEXT," + // 5: reminderText
                "\"REMINDER\" TEXT," + // 6: reminder
                "\"DESCRIPTION_TEXT\" TEXT," + // 7: descriptionText
                "\"DESCRIPTION\" TEXT);"); // 8: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DCOOKING_STEP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DCookingStep entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        Integer index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(3, index);
        }
 
        List images = entity.getImages();
        if (images != null) {
            stmt.bindString(4, imagesConverter.convertToDatabaseValue(images));
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String reminderText = entity.getReminderText();
        if (reminderText != null) {
            stmt.bindString(6, reminderText);
        }
 
        String reminder = entity.getReminder();
        if (reminder != null) {
            stmt.bindString(7, reminder);
        }
 
        String descriptionText = entity.getDescriptionText();
        if (descriptionText != null) {
            stmt.bindString(8, descriptionText);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(9, description);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DCookingStep entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        Integer index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(3, index);
        }
 
        List images = entity.getImages();
        if (images != null) {
            stmt.bindString(4, imagesConverter.convertToDatabaseValue(images));
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String reminderText = entity.getReminderText();
        if (reminderText != null) {
            stmt.bindString(6, reminderText);
        }
 
        String reminder = entity.getReminder();
        if (reminder != null) {
            stmt.bindString(7, reminder);
        }
 
        String descriptionText = entity.getDescriptionText();
        if (descriptionText != null) {
            stmt.bindString(8, descriptionText);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(9, description);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DCookingStep readEntity(Cursor cursor, int offset) {
        DCookingStep entity = new DCookingStep( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // index
            cursor.isNull(offset + 3) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 3)), // images
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // reminderText
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // reminder
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // descriptionText
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // description
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DCookingStep entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIndex(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setImages(cursor.isNull(offset + 3) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReminderText(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReminder(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescriptionText(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDescription(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DCookingStep entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DCookingStep entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DCookingStep entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "cookingSteps" to-many relationship of DRecipe. */
    public List<DCookingStep> _queryDRecipe_CookingSteps(String id) {
        synchronized (this) {
            if (dRecipe_CookingStepsQuery == null) {
                QueryBuilder<DCookingStep> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                dRecipe_CookingStepsQuery = queryBuilder.build();
            }
        }
        Query<DCookingStep> query = dRecipe_CookingStepsQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
