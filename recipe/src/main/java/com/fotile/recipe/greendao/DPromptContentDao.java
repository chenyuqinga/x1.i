package com.fotile.recipe.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.fotile.recipe.bean.recipe.DPromptContent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DPROMPT_CONTENT".
*/
public class DPromptContentDao extends AbstractDao<DPromptContent, Long> {

    public static final String TABLENAME = "DPROMPT_CONTENT";

    /**
     * Properties of entity DPromptContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property RecipeId = new Property(1, String.class, "recipeId", false, "RECIPE_ID");
        public final static Property InfoId = new Property(2, Long.class, "infoId", false, "INFO_ID");
        public final static Property Index = new Property(3, String.class, "index", false, "INDEX");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Value = new Property(5, String.class, "value", false, "VALUE");
        public final static Property Describe = new Property(6, String.class, "describe", false, "DESCRIBE");
        public final static Property Time = new Property(7, String.class, "time", false, "TIME");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
    }

    private Query<DPromptContent> dCookingPromptsInfo_PromptContentsQuery;

    public DPromptContentDao(DaoConfig config) {
        super(config);
    }
    
    public DPromptContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DPROMPT_CONTENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"RECIPE_ID\" TEXT," + // 1: recipeId
                "\"INFO_ID\" INTEGER," + // 2: infoId
                "\"INDEX\" TEXT," + // 3: index
                "\"NAME\" TEXT," + // 4: name
                "\"VALUE\" TEXT," + // 5: value
                "\"DESCRIBE\" TEXT," + // 6: describe
                "\"TIME\" TEXT," + // 7: time
                "\"TYPE\" TEXT);"); // 8: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DPROMPT_CONTENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DPromptContent entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String recipeId = entity.getRecipeId();
        if (recipeId != null) {
            stmt.bindString(2, recipeId);
        }
 
        Long infoId = entity.getInfoId();
        if (infoId != null) {
            stmt.bindLong(3, infoId);
        }
 
        String index = entity.getIndex();
        if (index != null) {
            stmt.bindString(4, index);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(6, value);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(7, describe);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DPromptContent entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String recipeId = entity.getRecipeId();
        if (recipeId != null) {
            stmt.bindString(2, recipeId);
        }
 
        Long infoId = entity.getInfoId();
        if (infoId != null) {
            stmt.bindLong(3, infoId);
        }
 
        String index = entity.getIndex();
        if (index != null) {
            stmt.bindString(4, index);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(6, value);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(7, describe);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DPromptContent readEntity(Cursor cursor, int offset) {
        DPromptContent entity = new DPromptContent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // recipeId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // infoId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // index
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // value
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // describe
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DPromptContent entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecipeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInfoId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setIndex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setValue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescribe(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DPromptContent entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DPromptContent entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DPromptContent entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "promptContents" to-many relationship of DCookingPromptsInfo. */
    public List<DPromptContent> _queryDCookingPromptsInfo_PromptContents(Long infoId) {
        synchronized (this) {
            if (dCookingPromptsInfo_PromptContentsQuery == null) {
                QueryBuilder<DPromptContent> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.InfoId.eq(null));
                dCookingPromptsInfo_PromptContentsQuery = queryBuilder.build();
            }
        }
        Query<DPromptContent> query = dCookingPromptsInfo_PromptContentsQuery.forCurrentThread();
        query.setParameter(0, infoId);
        return query.list();
    }

}
