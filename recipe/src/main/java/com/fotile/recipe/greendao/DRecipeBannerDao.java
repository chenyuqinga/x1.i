package com.fotile.recipe.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fotile.recipe.bean.recipe.StringConverter;
import java.util.List;

import com.fotile.recipe.bean.recipe.DRecipeBanner;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DRECIPE_BANNER".
*/
public class DRecipeBannerDao extends AbstractDao<DRecipeBanner, Long> {

    public static final String TABLENAME = "DRECIPE_BANNER";

    /**
     * Properties of entity DRecipeBanner.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Module = new Property(3, String.class, "module", false, "MODULE");
        public final static Property RecipeId = new Property(4, String.class, "recipeId", false, "RECIPE_ID");
        public final static Property Api = new Property(5, String.class, "api", false, "API");
        public final static Property Creator = new Property(6, String.class, "creator", false, "CREATOR");
        public final static Property Version = new Property(7, Integer.class, "version", false, "VERSION");
        public final static Property CreateId = new Property(8, String.class, "createId", false, "CREATE_ID");
        public final static Property CreateTime = new Property(9, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Images = new Property(10, String.class, "images", false, "IMAGES");
        public final static Property IsAdults = new Property(11, boolean.class, "isAdults", false, "IS_ADULTS");
    }

    private final StringConverter imagesConverter = new StringConverter();

    public DRecipeBannerDao(DaoConfig config) {
        super(config);
    }
    
    public DRecipeBannerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DRECIPE_BANNER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"ID\" TEXT," + // 1: id
                "\"NAME\" TEXT," + // 2: name
                "\"MODULE\" TEXT," + // 3: module
                "\"RECIPE_ID\" TEXT," + // 4: recipeId
                "\"API\" TEXT," + // 5: api
                "\"CREATOR\" TEXT," + // 6: creator
                "\"VERSION\" INTEGER," + // 7: version
                "\"CREATE_ID\" TEXT," + // 8: createId
                "\"CREATE_TIME\" TEXT," + // 9: createTime
                "\"IMAGES\" TEXT," + // 10: images
                "\"IS_ADULTS\" INTEGER NOT NULL );"); // 11: isAdults
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DRECIPE_BANNER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DRecipeBanner entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String module = entity.getModule();
        if (module != null) {
            stmt.bindString(4, module);
        }
 
        String recipeId = entity.getRecipeId();
        if (recipeId != null) {
            stmt.bindString(5, recipeId);
        }
 
        String api = entity.getApi();
        if (api != null) {
            stmt.bindString(6, api);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(7, creator);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(8, version);
        }
 
        String createId = entity.getCreateId();
        if (createId != null) {
            stmt.bindString(9, createId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(10, createTime);
        }
 
        List images = entity.getImages();
        if (images != null) {
            stmt.bindString(11, imagesConverter.convertToDatabaseValue(images));
        }
        stmt.bindLong(12, entity.getIsAdults() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DRecipeBanner entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String module = entity.getModule();
        if (module != null) {
            stmt.bindString(4, module);
        }
 
        String recipeId = entity.getRecipeId();
        if (recipeId != null) {
            stmt.bindString(5, recipeId);
        }
 
        String api = entity.getApi();
        if (api != null) {
            stmt.bindString(6, api);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(7, creator);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(8, version);
        }
 
        String createId = entity.getCreateId();
        if (createId != null) {
            stmt.bindString(9, createId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(10, createTime);
        }
 
        List images = entity.getImages();
        if (images != null) {
            stmt.bindString(11, imagesConverter.convertToDatabaseValue(images));
        }
        stmt.bindLong(12, entity.getIsAdults() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DRecipeBanner readEntity(Cursor cursor, int offset) {
        DRecipeBanner entity = new DRecipeBanner( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // module
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // recipeId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // api
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // creator
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // version
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // createId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createTime
            cursor.isNull(offset + 10) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 10)), // images
            cursor.getShort(offset + 11) != 0 // isAdults
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DRecipeBanner entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModule(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRecipeId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setApi(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreator(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVersion(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCreateId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImages(cursor.isNull(offset + 10) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 10)));
        entity.setIsAdults(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DRecipeBanner entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DRecipeBanner entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DRecipeBanner entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
