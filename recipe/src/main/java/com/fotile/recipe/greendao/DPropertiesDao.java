package com.fotile.recipe.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fotile.recipe.bean.recipe.DProperties;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DPROPERTIES".
*/
public class DPropertiesDao extends AbstractDao<DProperties, Long> {

    public static final String TABLENAME = "DPROPERTIES";

    /**
     * Properties of entity DProperties.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property TimeUnit = new Property(2, String.class, "timeUnit", false, "TIME_UNIT");
        public final static Property Difficulty = new Property(3, String.class, "difficulty", false, "DIFFICULTY");
        public final static Property CookingTime = new Property(4, String.class, "cookingTime", false, "COOKING_TIME");
    }


    public DPropertiesDao(DaoConfig config) {
        super(config);
    }
    
    public DPropertiesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DPROPERTIES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"ID\" TEXT," + // 1: id
                "\"TIME_UNIT\" TEXT," + // 2: timeUnit
                "\"DIFFICULTY\" TEXT," + // 3: difficulty
                "\"COOKING_TIME\" TEXT);"); // 4: cookingTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DPROPERTIES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DProperties entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String timeUnit = entity.getTimeUnit();
        if (timeUnit != null) {
            stmt.bindString(3, timeUnit);
        }
 
        String difficulty = entity.getDifficulty();
        if (difficulty != null) {
            stmt.bindString(4, difficulty);
        }
 
        String cookingTime = entity.getCookingTime();
        if (cookingTime != null) {
            stmt.bindString(5, cookingTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DProperties entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String timeUnit = entity.getTimeUnit();
        if (timeUnit != null) {
            stmt.bindString(3, timeUnit);
        }
 
        String difficulty = entity.getDifficulty();
        if (difficulty != null) {
            stmt.bindString(4, difficulty);
        }
 
        String cookingTime = entity.getCookingTime();
        if (cookingTime != null) {
            stmt.bindString(5, cookingTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DProperties readEntity(Cursor cursor, int offset) {
        DProperties entity = new DProperties( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // timeUnit
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // difficulty
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // cookingTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DProperties entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTimeUnit(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDifficulty(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCookingTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DProperties entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DProperties entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DProperties entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
